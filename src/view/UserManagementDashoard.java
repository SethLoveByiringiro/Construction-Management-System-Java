/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.UserDao;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.User;
import util.UserIDGenerator;
import util.ValidationUtils;
import static util.ValidationUtils.isEligibleForAdmin;

/**
 *
 * @author Love Byiringiro
 */
public class UserManagementDashoard extends javax.swing.JFrame {

    /**
     * Creates new form UserManagementDashoard
     */
    public UserManagementDashoard() {
        initComponents();
        setupWorkersJTable();
        workersJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addBTN = new javax.swing.JButton();
        updateBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workersJTable = new javax.swing.JTable();
        searchBTN = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        phoneNumberTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        positionComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        backBTN = new javax.swing.JButton();
        fullNamesTextField = new javax.swing.JTextField();
        nationalIDTextField = new javax.swing.JTextField();
        workerTextField = new javax.swing.JTextField();
        confirmPasswordTextField = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        userIDTextField = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(25, 21, 74));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("USER MANAGEMENT DASHBOARD");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        addBTN.setBackground(new java.awt.Color(255, 255, 255));
        addBTN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/add.png"))); // NOI18N
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });
        jPanel2.add(addBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 540, 100, 40));

        updateBTN.setBackground(new java.awt.Color(255, 255, 255));
        updateBTN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        updateBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/up.png"))); // NOI18N
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });
        jPanel2.add(updateBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 540, 110, 40));

        deleteBTN.setBackground(new java.awt.Color(255, 255, 255));
        deleteBTN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteBTN.setForeground(new java.awt.Color(153, 51, 0));
        deleteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/user.png"))); // NOI18N
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });
        jPanel2.add(deleteBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, 100, 40));

        workersJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(workersJTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 250, 830, 128));

        searchBTN.setBackground(new java.awt.Color(255, 255, 255));
        searchBTN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/search.png"))); // NOI18N
        searchBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });
        jPanel2.add(searchBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 80, 90, 50));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("NATIONAL ID:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("FULLNAMES:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 110, -1));

        phoneNumberTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel2.add(phoneNumberTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 260, 239, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("PHONE NUMBER:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("POSITION:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 100, -1));

        positionComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        positionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Laborer", "Carpenter", "Electrician", "Mason", "Welder", "Plumber", "Painter", "Supervisor", "Foreman", "Executives or Owners ", "Human Resources (HR)" }));
        positionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(positionComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, 239, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("PASSWORD:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 370, -1, -1));

        passwordTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel2.add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 240, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("ROLE:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, -1, -1));

        roleComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "User" }));
        jPanel2.add(roleComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 470, 233, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("WORKER ID:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("WORKERS DATA TABLE");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 190, 268, -1));

        backBTN.setBackground(new java.awt.Color(255, 255, 255));
        backBTN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        backBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/replay.png"))); // NOI18N
        backBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });
        jPanel2.add(backBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 600, 100, 60));

        fullNamesTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel2.add(fullNamesTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 239, -1));

        nationalIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel2.add(nationalIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 239, -1));

        workerTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel2.add(workerTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 90, 239, 30));
        jPanel2.add(confirmPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 230, 30));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("CONFIRM PASSWORD:");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 420, -1, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("USER ID:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, -1, -1));

        userIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        userIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIDTextFieldActionPerformed(evt);
            }
        });
        jPanel2.add(userIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 239, -1));

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/house.png"))); // NOI18N
        imageLabel.setText("image");
        jPanel2.add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 70, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1490, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
       AdminDashboard admin = new AdminDashboard();

            // Make the Signup form visible
            admin.setVisible(true);

            // Close or hide the current form if necessary
            this.setVisible(false); // Hide the current form
    }//GEN-LAST:event_backBTNActionPerformed

    private void positionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionComboBoxActionPerformed

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        // Retrieve the workerID from the input field
        String workerID = workerTextField.getText().trim();

        // Validate the userID
        if (workerID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a User ID to search.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the user from the database
        UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
        User foundUser = userDao.getUserByID(workerID);

        // Display the user information or show an error message
        if (foundUser != null) {
            // Display the user information in your UI components
            nationalIDTextField.setText(foundUser.getNationalID());
            fullNamesTextField.setText(foundUser.getFullNames());
            phoneNumberTextField.setText(foundUser.getPhoneNumber());
            positionComboBox.setSelectedItem(foundUser.getPosition());
            passwordTextField.setText(foundUser.getPassword());
            confirmPasswordTextField.setText(foundUser.getConfirmPassword());
            roleComboBox.setSelectedItem(foundUser.getRole());

            // Clear the existing data in the table
            DefaultTableModel model = (DefaultTableModel) workersJTable.getModel();
            model.setRowCount(0);

            // Add the found user data to the table
            Object[] rowData = {foundUser.getUserID(), foundUser.getNationalID(), foundUser.getFullNames(), foundUser.getPhoneNumber(), foundUser.getPosition(), foundUser.getRole()};
            model.addRow(rowData);

        } else {
            JOptionPane.showMessageDialog(this, "User with ID " + workerID + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
            // Optionally, you can clear or reset the UI components
        }
    }//GEN-LAST:event_searchBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // Retrieve the userID to be deleted
        String userIDToDelete = userIDTextField.getText().trim();

        // Validate the userID
        if (userIDToDelete.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a User ID to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm the deletion with the user
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the user with ID " + userIDToDelete + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // Call the delete method
            UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
            boolean deleteSuccess = userDao.deleteUser(userIDToDelete);

            // Display a success or error message
            if (deleteSuccess) {
                JOptionPane.showMessageDialog(this, "User deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearInputFields(); // Optionally clear input fields after successful deletion
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete user. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        setupWorkersJTable();

    }//GEN-LAST:event_deleteBTNActionPerformed

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTNActionPerformed
        // Retrieve values from input fields
        String userID = userIDTextField.getText().trim();
        String nationalID = nationalIDTextField.getText().trim();
        String fullNames = fullNamesTextField.getText().trim();
        String phoneNumber = phoneNumberTextField.getText().trim();
        String password = new String(passwordTextField.getPassword());
        String confirmPassword = new String(confirmPasswordTextField.getPassword());

        // Validate Role and Position (ComboBoxes)
        String selectedRole = roleComboBox.getSelectedItem().toString();
        String selectedPosition = positionComboBox.getSelectedItem().toString();

        if ("Select Role".equals(selectedRole) || "Select Position".equals(selectedPosition)) {
            JOptionPane.showMessageDialog(null, "Please select a valid Role and Position.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if non-eligible roles are trying to select Admin
        System.out.println("Before eligibility check - Selected Position: " + selectedPosition);
        System.out.println("Before eligibility check - Selected Role: " + selectedRole);
        if (selectedRole.equals("User")) {
            // No need to check eligibility for Admin
        } else {
            if (!isEligibleForAdmin(selectedPosition, selectedRole)) {
                JOptionPane.showMessageDialog(null, "You are not eligible to select the Admin role.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Validate fields
        if (!ValidationUtils.validateFields(nationalID, fullNames, phoneNumber, password, confirmPassword, roleComboBox, positionComboBox)) {
            return; // Exit the method if validation fails
        }

        // Check if the user with the specified userID exists
        UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
        User existingUser = userDao.getUserByID(userID);

        System.out.println("User ID: " + userID);
        System.out.println("Existing User: " + existingUser);

        if (existingUser == null) {
            JOptionPane.showMessageDialog(this, "User with ID " + userID + " does not exist. Cannot update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a User object with updated information
        User updatedUser = new User();
        updatedUser.setUserID(userID);
        updatedUser.setNationalID(nationalID);
        updatedUser.setFullNames(fullNames);
        updatedUser.setPhoneNumber(phoneNumber);
        updatedUser.setPosition(selectedPosition);
        updatedUser.setPassword(password);
        updatedUser.setConfirmPassword(confirmPassword);
        updatedUser.setRole(selectedRole);

        // Call the updateUser() method
        boolean updateSuccess = userDao.updateUser(updatedUser);

        // Display a success or error message
        if (updateSuccess) {
            JOptionPane.showMessageDialog(this, "User information updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputFields();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update user information. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        setupWorkersJTable();

    }//GEN-LAST:event_updateBTNActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // Retrieve values from input fields
        String nationalID = nationalIDTextField.getText().trim();
        String fullNames = fullNamesTextField.getText().trim();
        String phoneNumber = phoneNumberTextField.getText().trim();
        String password = new String(passwordTextField.getPassword());
        String confirmPassword = new String(confirmPasswordTextField.getPassword());

        // Validate Role and Position (ComboBoxes)
        String selectedRole = roleComboBox.getSelectedItem().toString();
        String selectedPosition = positionComboBox.getSelectedItem().toString();

        // Print values for debugging
        System.out.println("Selected Position: " + selectedPosition);
        System.out.println("Selected Role: " + selectedRole);

        if ("Select Role".equals(selectedRole) || "Select Position".equals(selectedPosition)) {
            JOptionPane.showMessageDialog(null, "Please select a valid Role and Position.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if non-eligible roles are trying to select Admin
        System.out.println("Before eligibility check - Selected Position: " + selectedPosition);
        System.out.println("Before eligibility check - Selected Role: " + selectedRole);
        if (selectedRole.equals("User")) {
            // No need to check eligibility for Admin
        } else {
            if (!isEligibleForAdmin(selectedPosition, selectedRole)) {
                JOptionPane.showMessageDialog(null, "You are not eligible to select the Admin role.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Validate fields
        if (!ValidationUtils.validateFields(nationalID, fullNames, phoneNumber, password, confirmPassword, roleComboBox, positionComboBox)) {
            return;  // Exit the method if validation fails
        }

        // Generate UserID
        String userID = UserIDGenerator.generateUserID(fullNames);

        // Determine the role
        String role = ValidationUtils.determineRole(selectedPosition, selectedRole);

        // Print values for debugging
        System.out.println("After eligibility check - Selected Position: " + selectedPosition);
        System.out.println("After eligibility check - Selected Role: " + selectedRole);
        System.out.println("Determined Role: " + role);

        // Rest of your registration logic

        // Create a User object
        User user = new User();
        user.setUserID(userID);
        user.setNationalID(nationalID);
        user.setFullNames(fullNames);
        user.setPhoneNumber(phoneNumber);
        user.setPassword(password);
        user.setConfirmPassword(confirmPassword);
        user.setRole(role);

        // Set the position
        user.setPosition(positionComboBox.getSelectedItem().toString());

        // Insert the user into the database
        UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
        boolean registrationSuccess = userDao.addUser(user);

        if (registrationSuccess) {
            JOptionPane.showMessageDialog(this, "Registration Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputFields();
        } else {
            JOptionPane.showMessageDialog(this, "Registration Failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        setupWorkersJTable();

    }//GEN-LAST:event_addBTNActionPerformed

    private void userIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userIDTextFieldActionPerformed
// Helper method to clear input fields
    private void clearInputFields() {
        userIDTextField.setText("");
        nationalIDTextField.setText("");
        fullNamesTextField.setText("");
        phoneNumberTextField.setText("");
        passwordTextField.setText("");
        confirmPasswordTextField.setText("");
        roleComboBox.setSelectedIndex(0);
        positionComboBox.setSelectedIndex(0);
        }    // Add this method to your class
    private void setupWorkersJTable() {
    // Define the column names
    String[] columnNames = {"User ID", "National ID", "Full Names", "Phone Number", "Position", "Role"};

    // Create a DefaultTableModel with the specified columns
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);
    workersJTable.setModel(model);

    // Retrieve data from the database and add it to the table
    UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
    List<User> userList = userDao.getAllUsers();

    for (User user : userList) {
        Object[] rowData = {user.getUserID(), user.getNationalID(), user.getFullNames(), user.getPhoneNumber(), user.getPosition(), user.getRole()};
        model.addRow(rowData);
    }
    
}
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {
    // Get the selected row and retrieve user information from the table
    int selectedRow = workersJTable.getSelectedRow();

    // Check if a row is selected
    if (selectedRow != -1) {
        String userID = workersJTable.getValueAt(selectedRow, 0).toString(); // Assuming the User ID is in the first column

        // Retrieve the user from the database
        UserDao userDao = new UserDao("jdbc:mysql://localhost:3306/construction_management_system_db", "root", "");
        User foundUser = userDao.getUserByID(userID);

        // Display the user information in the input fields
        if (foundUser != null) {
            userIDTextField.setText(foundUser.getUserID());
            nationalIDTextField.setText(foundUser.getNationalID());
            fullNamesTextField.setText(foundUser.getFullNames());
            phoneNumberTextField.setText(foundUser.getPhoneNumber());
            positionComboBox.setSelectedItem(foundUser.getPosition());
            passwordTextField.setText(foundUser.getPassword());
            confirmPasswordTextField.setText(foundUser.getConfirmPassword());
            roleComboBox.setSelectedItem(foundUser.getRole());
        }
    }
}



    




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagementDashoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagementDashoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagementDashoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagementDashoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagementDashoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JButton backBTN;
    private javax.swing.JPasswordField confirmPasswordTextField;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JTextField fullNamesTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nationalIDTextField;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JComboBox<String> positionComboBox;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JButton searchBTN;
    private javax.swing.JButton updateBTN;
    private javax.swing.JTextField userIDTextField;
    private javax.swing.JTextField workerTextField;
    private javax.swing.JTable workersJTable;
    // End of variables declaration//GEN-END:variables
}
